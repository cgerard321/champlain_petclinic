# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle
# Optimized for sub-2-minute execution with advanced caching and parallel processing

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  api_gateway_test:
    runs-on: "ubuntu-22.04"
    timeout-minutes: 15
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-api-gateway-${{ hashFiles('**/api-gateway/*.gradle*', '**/api-gateway/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-api-gateway-
          ${{ runner.os }}-gradle-
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      working-directory: ./api-gateway
    - name: Build with Gradle Wrapper
      run: ./gradlew clean build jacocoTestReport --daemon
      working-directory: ./api-gateway
    - name: Verify coverage threshold
      run: ./gradlew jacocoTestCoverageVerification --daemon
      working-directory: ./api-gateway
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports-api-gateway
        path: |
          ./api-gateway/build/reports/jacoco/test/html/
          ./api-gateway/build/reports/jacoco/test/jacocoTestReport.xml
        retention-days: 30
      if: always()

  visits_service_test:
    runs-on: "ubuntu-22.04"
    timeout-minutes: 15
    steps:
    - name: Checkout sources
      uses: actions/checkout@v4
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: 17
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-visits-${{ hashFiles('**/visits-service-new/*.gradle*', '**/visits-service-new/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-visits-
          ${{ runner.os }}-gradle-
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      working-directory: ./visits-service-new
    - name: Build with Gradle
      run: ./gradlew clean build jacocoTestReport --daemon
      working-directory: ./visits-service-new
    - name: Verify coverage threshold
      run: ./gradlew jacocoTestCoverageVerification --daemon
      working-directory: ./visits-service-new
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports-visits-service
        path: |
          ./visits-service-new/build/reports/jacoco/test/html/
          ./visits-service-new/build/reports/jacoco/test/jacocoTestReport.xml
        retention-days: 30
      if: always()

  vet_service_test:
    runs-on: "ubuntu-22.04"
    timeout-minutes: 15
    steps:
    - name: Checkout sources
      uses: actions/checkout@v4
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: 17
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-vet-${{ hashFiles('**/vet-service/*.gradle*', '**/vet-service/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-vet-
          ${{ runner.os }}-gradle-
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      working-directory: ./vet-service
    - name: Build with Gradle
      run: ./gradlew clean build jacocoTestReport --daemon
      working-directory: ./vet-service
    - name: Verify coverage threshold
      run: ./gradlew jacocoTestCoverageVerification --daemon
      working-directory: ./vet-service
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports-vet-service
        path: |
          ./vet-service/build/reports/jacoco/test/html/
          ./vet-service/build/reports/jacoco/test/jacocoTestReport.xml
        retention-days: 30
      if: always()


  customers_service_reactive_test:
    runs-on: "ubuntu-22.04"
    timeout-minutes: 15
    steps:
    - name: Checkout sources
      uses: actions/checkout@v4
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: 17
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-customers-${{ hashFiles('**/customers-service-reactive/*.gradle*', '**/customers-service-reactive/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-customers-
          ${{ runner.os }}-gradle-
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      working-directory: ./customers-service-reactive
    - name: Build with Gradle
      run: ./gradlew clean build jacocoTestReport --daemon
      working-directory: ./customers-service-reactive
    - name: Verify coverage threshold
      run: ./gradlew jacocoTestCoverageVerification --daemon
      working-directory: ./customers-service-reactive
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports-customers-service
        path: |
          ./customers-service-reactive/build/reports/jacoco/test/html/
          ./customers-service-reactive/build/reports/jacoco/test/jacocoTestReport.xml
        retention-days: 30
      if: always()

  billing_service_test:
    runs-on: "ubuntu-22.04"
    timeout-minutes: 15
    steps:
    - name: Checkout sources
      uses: actions/checkout@v4
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: 17
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-billing-${{ hashFiles('**/billing-service/*.gradle*', '**/billing-service/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-billing-
          ${{ runner.os }}-gradle-
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      working-directory: ./billing-service
    - name: Build with Gradle
      run: ./gradlew clean build jacocoTestReport --daemon
      working-directory: ./billing-service
    - name: Verify coverage threshold
      run: ./gradlew jacocoTestCoverageVerification --daemon
      working-directory: ./billing-service
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports-billing-service
        path: |
          ./billing-service/build/reports/jacoco/test/html/
          ./billing-service/build/reports/jacoco/test/jacocoTestReport.xml
        retention-days: 30
      if: always()

  auth_service_test:
    runs-on: "ubuntu-22.04"
    timeout-minutes: 15
    steps:
    - name: Checkout sources
      uses: actions/checkout@v4
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: 17
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-auth-${{ hashFiles('**/auth-service/*.gradle*', '**/auth-service/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-auth-
          ${{ runner.os }}-gradle-
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      working-directory: ./auth-service
    - name: Build with Gradle
      run: ./gradlew clean build jacocoTestReport --daemon
      working-directory: ./auth-service
    - name: Verify coverage threshold
      run: ./gradlew jacocoTestCoverageVerification --daemon
      working-directory: ./auth-service
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports-auth-service
        path: |
          ./auth-service/build/reports/jacoco/test/html/
          ./auth-service/build/reports/jacoco/test/jacocoTestReport.xml
        retention-days: 30
      if: always()

  inventory_service_test:
    runs-on: "ubuntu-22.04"
    timeout-minutes: 15
    steps:
    - name: Checkout sources
      uses: actions/checkout@v4
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: 17
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-inventory-${{ hashFiles('**/inventory-service/*.gradle*', '**/inventory-service/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-inventory-
          ${{ runner.os }}-gradle-
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      working-directory: ./inventory-service
    - name: Build with Gradle
      run: ./gradlew clean build jacocoTestReport --daemon
      working-directory: ./inventory-service
    - name: Verify coverage threshold
      run: ./gradlew jacocoTestCoverageVerification --daemon
      working-directory: ./inventory-service
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports-inventory-service
        path: |
          ./inventory-service/build/reports/jacoco/test/html/
          ./inventory-service/build/reports/jacoco/test/jacocoTestReport.xml
        retention-days: 30
      if: always()

  products_service_test:
    runs-on: "ubuntu-22.04"
    timeout-minutes: 15
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.gradle/daemon
          key: ${{ runner.os }}-gradle-products-${{ hashFiles('**/products-service/*.gradle*', '**/products-service/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-products-
            ${{ runner.os }}-gradle-
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
      - name: Make gradlew executable
        run: chmod +x ./gradlew
        working-directory: ./products-service
      - name: Build with Gradle
        run: ./gradlew clean build jacocoTestReport --daemon
        working-directory: ./products-service
      - name: Verify coverage threshold
        run: ./gradlew jacocoTestCoverageVerification --daemon
        working-directory: ./products-service
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-products-service
          path: |
            ./products-service/build/reports/jacoco/test/html/
            ./products-service/build/reports/jacoco/test/jacocoTestReport.xml
          retention-days: 30
        if: always()


  cart_service_test:
    runs-on: "ubuntu-22.04"
    timeout-minutes: 15
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.gradle/daemon
          key: ${{ runner.os }}-gradle-cart-${{ hashFiles('**/cart-service/*.gradle*', '**/cart-service/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-cart-
            ${{ runner.os }}-gradle-
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
      - name: Make gradlew executable
        run: chmod +x ./gradlew
        working-directory: ./cart-service
      - name: Build with Gradle
        run: ./gradlew clean build jacocoTestReport --daemon
        working-directory: ./cart-service
      - name: Verify coverage threshold
        run: ./gradlew jacocoTestCoverageVerification --daemon
        working-directory: ./cart-service
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-cart-service
          path: |
            ./cart-service/build/reports/jacoco/test/html/
            ./cart-service/build/reports/jacoco/test/jacocoTestReport.xml
          retention-days: 30
        if: always()

    
  coverage-summary:
    runs-on: "ubuntu-22.04"
    needs: [api_gateway_test, visits_service_test, vet_service_test, customers_service_reactive_test, billing_service_test, auth_service_test, inventory_service_test, products_service_test, cart_service_test]
    if: always() && (github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main'))
    steps:
    - name: Checkout sources
      uses: actions/checkout@v4
    - name: Download all coverage reports
      uses: actions/download-artifact@v4
      with:
        path: coverage-reports
    - name: List downloaded artifacts
      run: |
        echo "Downloaded artifacts:"
        ls -la coverage-reports/ || echo "No coverage-reports directory found"
        find coverage-reports -name "*.html" -type f | head -10 || echo "No HTML files found"
        echo "Sample HTML content from first report:"
        find coverage-reports -name "index.html" -type f | head -1 | xargs head -20 || echo "No index.html found"
    - name: Generate coverage summary
      run: |
        echo "## Code Coverage Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Coverage reports have been generated for all microservices." >> $GITHUB_STEP_SUMMARY
        echo "View detailed reports in the Actions artifacts." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Actual Coverage Results" >> $GITHUB_STEP_SUMMARY
        
        # Check if coverage-reports directory exists
        if [ ! -d "coverage-reports" ]; then
          echo "No coverage reports directory found" >> $GITHUB_STEP_SUMMARY
          exit 0
        fi
        
        for report_dir in coverage-reports/*/; do
          if [ -d "$report_dir" ]; then
            service_name=$(basename "$report_dir")
            main_index="$report_dir/index.html"
            xml_report="$report_dir/jacocoTestReport.xml"
            
            # Try to get coverage from XML first (more reliable)
            if [ -f "$xml_report" ]; then
              coverage=$(grep -o 'line-rate="[0-9.]*"' "$xml_report" 2>/dev/null | head -1 | grep -o '[0-9.]*' | awk '{printf "%.1f%%", $1*100}' 2>/dev/null || echo "")
              branch_coverage=$(grep -o 'branch-rate="[0-9.]*"' "$xml_report" 2>/dev/null | head -1 | grep -o '[0-9.]*' | awk '{printf "%.1f%%", $1*100}' 2>/dev/null || echo "")
              lines_covered=$(grep -o 'lines-covered="[0-9]*"' "$xml_report" 2>/dev/null | head -1 | grep -o '[0-9]*' || echo "")
              lines_total=$(grep -o 'lines-valid="[0-9]*"' "$xml_report" 2>/dev/null | head -1 | grep -o '[0-9]*' || echo "")
              
              if [ -n "$coverage" ]; then
                echo "- $service_name: $coverage ($lines_covered/$lines_total lines) | Branch: $branch_coverage | [View Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
              fi
            # Fallback to HTML parsing
            elif [ -f "$main_index" ]; then
              coverage=$(grep -A 5 'tfoot' "$main_index" 2>/dev/null | grep -o '[0-9]*%' | head -1 || echo "")
              if [ -z "$coverage" ]; then
                coverage=$(grep -o 'class="ctr2">[0-9]*%' "$main_index" 2>/dev/null | head -1 | grep -o '[0-9]*%' || echo "")
              fi
              if [ -z "$coverage" ]; then
                coverage=$(grep -o '[0-9]*%' "$main_index" 2>/dev/null | head -1 || echo "")
              fi
              if [ -n "$coverage" ]; then
                echo "- $service_name: $coverage | [View Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
              else
                echo "- $service_name: Coverage data not found" >> $GITHUB_STEP_SUMMARY
              fi
            else
              echo "- $service_name: No coverage report found" >> $GITHUB_STEP_SUMMARY
            fi
          fi
        done
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "###  JaCoCo Coverage Bot" >> $GITHUB_STEP_SUMMARY
        echo "Access detailed coverage reports for all microservices:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        for report_dir in coverage-reports/*/; do
          if [ -d "$report_dir" ]; then
            service_name=$(basename "$report_dir")
            main_index="$report_dir/index.html"
            xml_report="$report_dir/jacocoTestReport.xml"
            
            echo "####  **$service_name**" >> $GITHUB_STEP_SUMMARY
            
            # Try to get detailed coverage from XML first
            if [ -f "$xml_report" ]; then
              coverage=$(grep -o 'line-rate="[0-9.]*"' "$xml_report" 2>/dev/null | head -1 | grep -o '[0-9.]*' | awk '{printf "%.1f%%", $1*100}' 2>/dev/null || echo "")
              branch_coverage=$(grep -o 'branch-rate="[0-9.]*"' "$xml_report" 2>/dev/null | head -1 | grep -o '[0-9.]*' | awk '{printf "%.1f%%", $1*100}' 2>/dev/null || echo "")
              lines_covered=$(grep -o 'lines-covered="[0-9]*"' "$xml_report" 2>/dev/null | head -1 | grep -o '[0-9]*' || echo "")
              lines_total=$(grep -o 'lines-valid="[0-9]*"' "$xml_report" 2>/dev/null | head -1 | grep -o '[0-9]*' || echo "")
              branches_covered=$(grep -o 'branches-covered="[0-9]*"' "$xml_report" 2>/dev/null | head -1 | grep -o '[0-9]*' || echo "")
              branches_total=$(grep -o 'branches-valid="[0-9]*"' "$xml_report" 2>/dev/null | head -1 | grep -o '[0-9]*' || echo "")
              
              if [ -n "$coverage" ]; then
                echo "- **Line Coverage:** $coverage ($lines_covered/$lines_total lines)" >> $GITHUB_STEP_SUMMARY
                echo "- **Branch Coverage:** $branch_coverage ($branches_covered/$branches_total branches)" >> $GITHUB_STEP_SUMMARY
                echo "- ** [View HTML Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})**" >> $GITHUB_STEP_SUMMARY
                echo "- ** [Download XML Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})**" >> $GITHUB_STEP_SUMMARY
              fi
            # Fallback to HTML parsing
            elif [ -f "$main_index" ]; then
              coverage=$(grep -A 5 'tfoot' "$main_index" 2>/dev/null | grep -o '[0-9]*%' | head -1 || echo "")
              if [ -z "$coverage" ]; then
                coverage=$(grep -o 'class="ctr2">[0-9]*%' "$main_index" 2>/dev/null | head -1 | grep -o '[0-9]*%' || echo "")
              fi
              if [ -z "$coverage" ]; then
                coverage=$(grep -o '[0-9]*%' "$main_index" 2>/dev/null | head -1 || echo "")
              fi
              if [ -n "$coverage" ]; then
                echo "- **Coverage:** $coverage" >> $GITHUB_STEP_SUMMARY
                echo "- ** [View HTML Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})**" >> $GITHUB_STEP_SUMMARY
              fi
            else
              echo "- **Status:** No coverage report found" >> $GITHUB_STEP_SUMMARY
            fi
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
        done

  dependency-submission:
    runs-on: "ubuntu-22.04"
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
    # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
    - name: Generate and submit dependency graph
      uses: gradle/actions/setup-gradle@v3
