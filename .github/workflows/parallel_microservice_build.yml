# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  api_gateway_test:
    runs-on: "ubuntu-22.04"
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      working-directory: ./api-gateway
    - name: Build with Gradle Wrapper
      run: ./gradlew clean build jacocoTestReport
      working-directory: ./api-gateway
    - name: Verify coverage threshold
      run: ./gradlew jacocoTestCoverageVerification
      working-directory: ./api-gateway
      continue-on-error: true
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports-api-gateway
        path: ./api-gateway/build/reports/jacoco/test/html/
        retention-days: 30

  visits_service_test:
    runs-on: "ubuntu-22.04"
    steps:
    - name: Checkout sources
      uses: actions/checkout@v4
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: 17
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      working-directory: ./visits-service-new
    - name: Build with Gradle
      run: ./gradlew clean build jacocoTestReport jacocoTestCoverageVerification
      working-directory: ./visits-service-new
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports-visits-service
        path: ./visits-service-new/build/reports/jacoco/test/html/
        retention-days: 30

  vet_service_test:
    runs-on: "ubuntu-22.04"
    steps:
    - name: Checkout sources
      uses: actions/checkout@v4
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: 17
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      working-directory: ./vet-service
    - name: Build with Gradle
      run: ./gradlew clean build jacocoTestReport jacocoTestCoverageVerification
      working-directory: ./vet-service
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports-vet-service
        path: ./vet-service/build/reports/jacoco/test/html/
        retention-days: 30


  customers_service_reactive_test:
    runs-on: "ubuntu-22.04"
    steps:
    - name: Checkout sources
      uses: actions/checkout@v4
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: 17
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      working-directory: ./customers-service-reactive
    - name: Build with Gradle
      run: ./gradlew clean build jacocoTestReport jacocoTestCoverageVerification
      working-directory: ./customers-service-reactive
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports-customers-service
        path: ./customers-service-reactive/build/reports/jacoco/test/html/
        retention-days: 30

  billing_service_test:
    runs-on: "ubuntu-22.04"
    steps:
    - name: Checkout sources
      uses: actions/checkout@v4
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: 17
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      working-directory: ./billing-service
    - name: Build with Gradle
      run: ./gradlew clean build jacocoTestReport jacocoTestCoverageVerification
      working-directory: ./billing-service
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports-billing-service
        path: ./billing-service/build/reports/jacoco/test/html/
        retention-days: 30

  auth_service_test:
    runs-on: "ubuntu-22.04"
    steps:
    - name: Checkout sources
      uses: actions/checkout@v4
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: 17
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      working-directory: ./auth-service
    - name: Build with Gradle
      run: ./gradlew clean build jacocoTestReport jacocoTestCoverageVerification
      working-directory: ./auth-service
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports-auth-service
        path: ./auth-service/build/reports/jacoco/test/html/
        retention-days: 30

  inventory_service_test:
    runs-on: "ubuntu-22.04"
    steps:
    - name: Checkout sources
      uses: actions/checkout@v4
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: 17
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      working-directory: ./inventory-service
    - name: Build with Gradle
      run: ./gradlew clean build jacocoTestReport jacocoTestCoverageVerification
      working-directory: ./inventory-service
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports-inventory-service
        path: ./inventory-service/build/reports/jacoco/test/html/
        retention-days: 30

  products_service_test:
    runs-on: "ubuntu-22.04"
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
      - name: Make gradlew executable
        run: chmod +x ./gradlew
        working-directory: ./products-service
      - name: Build with Gradle
        run: ./gradlew clean build jacocoTestReport jacocoTestCoverageVerification
        working-directory: ./products-service
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-products-service
          path: ./products-service/build/reports/jacoco/test/html/
          retention-days: 30


  cart_service_test:
    runs-on: "ubuntu-22.04"
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
      - name: Make gradlew executable
        run: chmod +x ./gradlew
        working-directory: ./cart-service
      - name: Build with Gradle
        run: ./gradlew clean build jacocoTestReport jacocoTestCoverageVerification
        working-directory: ./cart-service
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-cart-service
          path: ./cart-service/build/reports/jacoco/test/html/
          retention-days: 30

    
  coverage-summary:
    runs-on: "ubuntu-22.04"
    needs: [api_gateway_test, visits_service_test, vet_service_test, customers_service_reactive_test, billing_service_test, auth_service_test, inventory_service_test, products_service_test, cart_service_test]
    if: always() && (github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main'))
    steps:
    - name: Checkout sources
      uses: actions/checkout@v4
    - name: Download all coverage reports
      uses: actions/download-artifact@v4
      with:
        path: coverage-reports
    - name: List downloaded artifacts
      run: |
        echo "Downloaded artifacts:"
        ls -la coverage-reports/ || echo "No coverage-reports directory found"
        find coverage-reports -name "*.html" -type f | head -10 || echo "No HTML files found"
        echo "Sample HTML content from first report:"
        find coverage-reports -name "index.html" -type f | head -1 | xargs head -20 || echo "No index.html found"
    - name: Generate coverage summary
      run: |
        echo "## Code Coverage Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Coverage reports have been generated for all microservices." >> $GITHUB_STEP_SUMMARY
        echo "View detailed reports in the Actions artifacts." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Actual Coverage Results" >> $GITHUB_STEP_SUMMARY
        
        # Extract actual coverage from HTML reports
        for report_dir in coverage-reports/*/; do
          if [ -d "$report_dir" ]; then
            service_name=$(basename "$report_dir")
            # Look for the main index.html file (not package-level ones)
            main_index="$report_dir/index.html"
            if [ -f "$main_index" ]; then
              # Try multiple patterns to extract coverage percentage from JaCoCo HTML reports
              # Pattern 1: Look for Total row in tfoot with coverage percentage
              coverage=$(grep -A 10 'tfoot' "$main_index" | grep -o 'Total.*<td class="ctr2">[0-9]*%</td>' | grep -o '[0-9]*%' | head -1)
              if [ -z "$coverage" ]; then
                # Pattern 2: Look for any ctr2 class with percentage in the main report
                coverage=$(grep -o 'class="ctr2">[0-9]*%</td>' "$main_index" | head -1 | grep -o '[0-9]*%')
              fi
              if [ -z "$coverage" ]; then
                # Pattern 3: Look for any percentage in the HTML
                coverage=$(grep -o '[0-9]*%' "$main_index" | head -1)
              fi
              if [ -n "$coverage" ]; then
                echo "- $service_name: $coverage" >> $GITHUB_STEP_SUMMARY
              else
                echo "- $service_name: Coverage data not found" >> $GITHUB_STEP_SUMMARY
              fi
            else
              echo "- $service_name: No coverage report found" >> $GITHUB_STEP_SUMMARY
            fi
          fi
        done

  dependency-submission:
    runs-on: "ubuntu-22.04"
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
    # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
    - name: Generate and submit dependency graph
      uses: gradle/actions/setup-gradle@v3
