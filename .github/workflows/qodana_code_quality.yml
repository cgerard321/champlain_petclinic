name: Qodana Code Quality Analysis

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main
      - 'releases/*'

jobs:
  qodana-analysis:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      checks: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Build and generate coverage reports
        run: |
          # Build all services and generate JaCoCo reports
          # Continue on test failures to allow Qodana analysis
          ./gradlew clean build jacocoTestReport --parallel --continue
        working-directory: ./

      - name: Create coverage-data directory and copy JaCoCo reports
        run: |
          mkdir -p .qodana/code-coverage
          
          # Copy JaCoCo XML reports for Qodana analysis
          echo "Collecting JaCoCo XML reports..."
          find . -name "jacocoTestReport.xml" -exec cp {} .qodana/code-coverage/ \;
          
          # Copy JaCoCo exec files (binary coverage data)
          echo "Collecting JaCoCo exec files..."
          find . -name "jacoco.exec" -exec cp {} .qodana/code-coverage/ \;
          
          # List collected files for debugging
          echo "Collected coverage files:"
          ls -la .qodana/code-coverage/
          
          # Create a summary of coverage data
          echo "Coverage Summary:" > .qodana/code-coverage/coverage-summary.txt
          find . -name "jacocoTestReport.xml" -exec echo "Found: {}" \; >> .qodana/code-coverage/coverage-summary.txt

      - name: Archive coverage data
        uses: actions/upload-artifact@v4
        with:
          name: qodana-coverage-data
          path: .qodana/code-coverage
          retention-days: 30

      - name: 'Qodana Scan with Code Coverage'
        uses: JetBrains/qodana-action@v2023.3
        env:
          QODANA_TOKEN: ${{ secrets.QODANA_TOKEN }}
        with:
          args: "-i,.qodana/code-coverage,--linter,jetbrains/qodana-jvm:latest"
          pr-mode: false
