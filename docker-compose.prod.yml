services:
  petclinicFrontend:
    image: petclinic-frontend
    container_name: petclinic-frontend
    pull_policy: never
    build:
      context: ./petclinic-frontend
      dockerfile: Dockerfile
      args:
        - BUILD_MODE=production
    ports:
      - "3000:3000"
    volumes:
      - .petclinic-frontend/src:/app/src
    restart: unless-stopped
    labels:
      - homepage.group=Development
      - homepage.name=Petclinic Frontend
      - homepage.icon=https://github.com/homarr-labs/dashboard-icons/blob/main/png/firefox-developer-edition.png?raw=true
      - homepage.href=https://petclinic.benmusicgeek.synology.me/
      - homepage.description=Petclinic Frontend Container
      - homepage.siteMonitor=https://petclinic.benmusicgeek.synology.me/

  visits-service-new:
    build: visits-service-new
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    restart: unless-stopped
    depends_on:
      - mongo2
      - mailer-service

  inventory-service:
    build: inventory-service
    hostname: inventory
    restart: unless-stopped
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - mongo-inventory

  vet-service:
    build: vet-service
    restart: unless-stopped
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - mongo
      - postgres

  customers-service-reactive:
    build: customers-service-reactive
    restart: unless-stopped
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - mongo-customers

  api-gateway:
    build: api-gateway
    #mem_limit: 350m
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    depends_on:
      - customers-service-reactive
      - vet-service
      - visits-service-new
      - products-service
      - cart-service
    labels:
      - homepage.group=Development
      - homepage.name=Petclinic Api Gateway
      - homepage.icon=https://github.com/homarr-labs/dashboard-icons/blob/main/png/kodi.png?raw=true
      - homepage.href=https://petclinic-backend.benmusicgeek.synology.me/
      - homepage.description=Petclinic Api Gateway
      - homepage.siteMonitor=https://petclinic-backend.benmusicgeek.synology.me/api/v2/gateway/vets

  auth-service:
    build: auth-service
    hostname: auth
    restart: unless-stopped
    depends_on:
      mysql4:
        condition: service_healthy
      mailer-service:
        condition: service_started
    environment:
      - SPRING_PROFILES_ACTIVE=docker

  billing-service:
    build: billing-service
    hostname: billing
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - mongo1

  mailer-service:
    build: mailer-service
    restart: unless-stopped
    environment:
      - SMTP_USER=champlain.petclinic@gmail.com
      - SMTP_SERVER=smtp.gmail.com
    env_file:
      - stack.env

  emailing-service:
    image: emailing-service
    pull_policy: never
    container_name: emailing-service-container
    restart: unless-stopped
    build:
      context: ./emailing-service
      dockerfile: emailing-service/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - DEFAULT_CONNECTION=Server=emailing-service-mysql-db;Port=3306;Database=MyAppDb;User=root;Password=Your_password123;
    depends_on:
      - emailing-service-mysql-db
    env_file:
      # This is for the environment vairables on the portainer deployment server,
      #if you do not have a stack.env in the root of the project while running locally it will not work
      - stack.env

  products-service:
    build: products-service
    hostname: products-service
    restart: unless-stopped
    depends_on:
      - mongo-products
    environment:
      - SPRING_PROFILES_ACTIVE=docker

  cart-service:
    build: cart-service
    hostname: cart
    restart: unless-stopped
    depends_on:
      - mongo-carts
    environment:
      - SPRING_PROFILES_ACTIVE=docker

  mysql4:
    image: mysql:5.7
    platform: linux/amd64 # for M1 Macs
    ports:
      - "3310:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=rootpwd
      - MYSQL_DATABASE=auth-db
      - MYSQL_USER=user
      - MYSQL_PASSWORD=pwd
    restart: unless-stopped
    volumes:
      - ./data/mysql4:/var/lib/mysql4
      - ./data/init.d:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-uuser", "-ppwd", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 10

  # vet mongo container
  mongo:
    image: mongo
    container_name: mongo
    restart: unless-stopped
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
      
  #Vet Images Postgres container
  postgres:
    image: postgres
    container_name: postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=pwd
      - POSTGRES_DB=images
    ports:
      - 5432:5432
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    restart: unless-stopped
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@vets.com
      - PGADMIN_DEFAULT_PASSWORD=admin
    ports:
      - 9003:80
    depends_on:
      - postgres

  # billing mongo container
  mongo1:
    image: mongo
    container_name: mongo1
    restart: unless-stopped
    ports:
      - 27018:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
 
  mongo2:
    image: mongo
    container_name: mongo2
    restart: unless-stopped
    ports:
      - 27015:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/test --quiet
      retries: 5
      interval: 15s
      start_period: 30s

  mongo-customers:
    image: mongo
    container_name: mongo-customers
    restart: unless-stopped
    ports:
      - 27019:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password

  mongo-express-customers:
    image: mongo-express
    restart: unless-stopped
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=root
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_SERVER=mongo-customers
      - ME_CONFIG_MONGODB_ENABLE_ADMIN=true
    ports:
      - 8085:8081
    depends_on:
      - mongo-customers
      - customers-service-reactive

    # billing mongo container
  mongo-inventory:
    image: mongo
    container_name: mongo-inventory
    restart: unless-stopped
    ports:
      - 27020:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password

  mongo-express-inventory:
    image: mongo-express
    restart: unless-stopped
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=root
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_SERVER=mongo-inventory
      - ME_CONFIG_MONGODB_ENABLE_ADMIN=true
    ports:
      - 8083:8083
    depends_on:
      - mongo-inventory
      - inventory-service

  mongo-products:
    image: mongo
    container_name: mongo-products
    restart: unless-stopped
    ports:
      - 27021:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password

  mongo-express-products:
    image: mongo-express
    restart: unless-stopped
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=root
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_SERVER=mongo-products
      - ME_CONFIG_MONGODB_ENABLE_ADMIN=true
    ports:
      - 8086:8081
    depends_on:
      - mongo-products
      - products-service

  mongo-carts:
    image: mongo
    container_name: mongo-carts
    restart: unless-stopped
    ports:
      - 27022:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password

  mongo-express-carts:
    image: mongo-express
    restart: unless-stopped
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=root
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_SERVER=mongo-products
      - ME_CONFIG_MONGODB_ENABLE_ADMIN=true
    ports:
      - 8087:8081
    depends_on:
      - mongo-carts
      - cart-service
  emailing-service-mysql-db:
    image: mysql:8.0
    container_name: emailing-service-mysql-db
    restart: unless-stopped
    platform: linux/amd64
    environment:
      - MYSQL_ROOT_PASSWORD=Your_password123
      - MYSQL_DATABASE=MyAppDb
      - SPRING_PROFILES_ACTIVE=docker
    ports:
      - "3308:3306"
