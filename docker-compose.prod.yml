---
version: "3.9"

# =========================
# Reusable healthchecks
# =========================
x-healthchecks:
  springboot: &springboot
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8080/actuator/health || curl -fsS http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  react-node: &react_node
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:3000/ || true"]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 15s

  angular-node: &angular_node
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:4200/ || true"]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 15s

  dbgate: &dbgate_hc
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS -u CPC_Admin:${DBGATE_PASSWORD} http://localhost:3000/ || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 10s

  mysql: &mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-uuser", "-ppwd", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  postgres: &postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d images -h localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  mongo: &mongo
    healthcheck:
      test: ["CMD-SHELL", "mongosh --quiet --eval 'db.runCommand({ ping: 1 }).ok' || mongo --quiet --eval 'db.runCommand({ ping: 1 }).ok'"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s

services:
  # =========================
  # FRONTEND (React/Node)
  # =========================
  petclinicFrontend:
    <<: *react_node
    image: petclinic-frontend
    container_name: petclinic-frontend
    pull_policy: never
    build:
      context: ./petclinic-frontend
      dockerfile: Dockerfile
      args:
        - BUILD_MODE=production
    ports:
      - "3000:3000"
    volumes:
      - ./petclinic-frontend/src:/app/src
    restart: unless-stopped
    labels:
      - homepage.group=Development
      - homepage.name=Petclinic Frontend
      - homepage.icon=https://github.com/homarr-labs/dashboard-icons/blob/main/png/firefox-developer-edition.png?raw=true
      - homepage.href=https://petclinic.benmusicgeek.synology.me/
      - homepage.description=Petclinic Frontend Container
      - homepage.siteMonitor=https://petclinic.benmusicgeek.synology.me/

  # Employee front-end
  employeeFrontend:
    <<: *angular_node
    image: employee-frontend
    container_name: employee-frontend
    pull_policy: never
    build:
      context: ./employee-frontend
      dockerfile: Dockerfile
      args:
        - BUILD_MODE=production
    ports:
      - "4200:4200"
    volumes:
      - ./employee-frontend/src:/app/src
    restart: unless-stopped
    labels:
      - homepage.group=Development
      - homepage.name=Employee Frontend
      - homepage.icon=https://github.com/homarr-labs/dashboard-icons/blob/main/png/angular.png?raw=true
      - homepage.href=https://petclinic-backend.benmusicgeek.synology.me/employee/
      - homepage.description=Employee Frontend Container
      - homepage.siteMonitor=https://petclinic-backend.benmusicgeek.synology.me/employee/

  # =========================
  # BACKEND — Spring Boot
  # =========================
  api-gateway:
    <<: *springboot
    build: api-gateway
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    restart: unless-stopped
    depends_on:
      customers-service-reactive:
        condition: service_healthy
      vet-service:
        condition: service_healthy
      visits-service-new:
        condition: service_healthy
      products-service:
        condition: service_healthy
      cart-service:
        condition: service_healthy
      inventory-service:
        condition: service_healthy
      billing-service:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    labels:
      - homepage.group=Development
      - homepage.name=Petclinic Api Gateway
      - homepage.icon=https://github.com/homarr-labs/dashboard-icons/blob/main/png/kodi.png?raw=true
      - homepage.href=https://petclinic-backend.benmusicgeek.synology.me/
      - homepage.description=Petclinic Api Gateway
      - homepage.siteMonitor=https://petclinic-backend.benmusicgeek.synology.me/api/v2/gateway/vets

  visits-service-new:
    <<: *springboot
    build: visits-service-new
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    restart: unless-stopped
    depends_on:
      mongo-visits:
        condition: service_healthy
      mailer-service:
        condition: service_started

  inventory-service:
    <<: *springboot
    build: inventory-service
    hostname: inventory
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    restart: unless-stopped
    depends_on:
      mongo-inventory:
        condition: service_healthy

  vet-service:
    <<: *springboot
    build: vet-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    restart: unless-stopped
    depends_on:
      mongo-vet:
        condition: service_healthy
      postgres-vet:
        condition: service_healthy

  customers-service-reactive:
    <<: *springboot
    build: customers-service-reactive
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    restart: unless-stopped
    depends_on:
      mongo-customers:
        condition: service_healthy

  auth-service:
    <<: *springboot
    build: auth-service
    hostname: auth
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    restart: unless-stopped
    depends_on:
      mysql-auth:
        condition: service_healthy
      mailer-service:
        condition: service_started

  billing-service:
    <<: *springboot
    build: billing-service
    hostname: billing
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    restart: unless-stopped
    depends_on:
      mongo-billing:
        condition: service_healthy

  products-service:
    <<: *springboot
    build: products-service
    hostname: products-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    restart: unless-stopped
    depends_on:
      mongo-products:
        condition: service_healthy

  cart-service:
    <<: *springboot
    build: cart-service
    hostname: cart
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    restart: unless-stopped
    depends_on:
      mongo-carts:
        condition: service_healthy

  # =========================
  # BACKEND — Go (manual)
  # =========================
  mailer-service:
    build: mailer-service
    environment:
      - SMTP_USER=champlain.petclinic@gmail.com
      - SMTP_SERVER=smtp.gmail.com
    env_file:
      - stack.env
    restart: unless-stopped

  files-service:
    build: files-service
    environment:
      - FILE_DATABASE=user:pwd@tcp(mysql-files:3306)/files-db
      - FILE_ENDPOINT=petclinic-bucket.benmusicgeek.synology.me
      - FILE_ENV=prod
    env_file:
      - stack.env
    depends_on:
      mysql-files:
        condition: service_healthy
    restart: unless-stopped

  # =========================
  # DATABASES — SQL
  # =========================
  mysql-auth:
    <<: *mysql
    image: mysql:5.7
    platform: linux/amd64
    environment:
      - MYSQL_ROOT_PASSWORD=rootpwd
      - MYSQL_DATABASE=auth-db
      - MYSQL_USER=user
      - MYSQL_PASSWORD=pwd
    volumes:
      - mysql-auth-data:/var/lib/mysql
      - ./data/init.d:/docker-entrypoint-initdb.d
    restart: unless-stopped

  mysql-files:
    <<: *mysql
    image: mysql:5.7
    platform: linux/amd64
    environment:
      - MYSQL_ROOT_PASSWORD=rootpwd
      - MYSQL_DATABASE=files-db
      - MYSQL_USER=user
      - MYSQL_PASSWORD=pwd
    volumes:
      - mysql-files-data:/var/lib/mysql

  postgres-vet:
    <<: *postgres
    image: postgres:17
    container_name: postgres-vet
    hostname: postgres
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=pwd
      - POSTGRES_DB=images
    volumes:
      - postgres-vet-data:/var/lib/postgresql/data
    restart: unless-stopped

  # =========================
  # DATABASES — MongoDB
  # =========================
  mongo-vet:
    <<: *mongo
    image: mongo
    container_name: mongo-vet
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
      - mongo-vet-data:/data/db
      - mongo-vet-config:/data/configdb
    restart: unless-stopped

  mongo-billing:
    <<: *mongo
    image: mongo
    container_name: mongo-billing
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
      - mongo-billing-data:/data/db
      - mongo-billing-config:/data/configdb
    restart: unless-stopped

  mongo-visits:
    <<: *mongo
    image: mongo
    container_name: mongo-visits
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
      - mongo-visits-data:/data/db
      - mongo-visits-config:/data/configdb
    restart: unless-stopped

  mongo-customers:
    <<: *mongo
    image: mongo
    container_name: mongo-customers
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
      - mongo-customers-data:/data/db
      - mongo-customers-config:/data/configdb
    restart: unless-stopped

  mongo-inventory:
    <<: *mongo
    image: mongo
    container_name: mongo-inventory
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
      - mongo-inventory-data:/data/db
      - mongo-inventory-config:/data/configdb
    restart: unless-stopped

  mongo-products:
    <<: *mongo
    image: mongo
    container_name: mongo-products
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
      - mongo-products-data:/data/db
      - mongo-products-config:/data/configdb
    restart: unless-stopped

  mongo-carts:
    <<: *mongo
    image: mongo
    container_name: mongo-carts
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
      - mongo-carts-data:/data/db
      - mongo-carts-config:/data/configdb
    restart: unless-stopped

  # =========================
  # ADMIN / TOOLING
  # =========================
  dbgate:
    <<: *dbgate_hc
    image: dbgate/dbgate:latest
    container_name: dbgate
    ports:
      - "8030:3000"
    restart: unless-stopped
    volumes:
      - dbgate-data:/root/.dbgate
    environment:
      - BASIC_AUTH=1
      - LOGIN=CPC_Admin
      - PASSWORD=${DBGATE_PASSWORD:-change-me}
      - SKIP_ALL_AUTH=0
      - ADMIN_PASSWORD=${DBGATE_ADMIN_PASSWORD:-change-me}

      - CONNECTIONS=mysqlAuth,mysqlFiles,postgresVet,mongoVet,mongoBilling,mongoVisits,mongoCustomers,mongoInventory,mongoProducts,mongoCarts

      # MySQL (auth)
      - LABEL_mysqlAuth=MySQL auth-db
      - ENGINE_mysqlAuth=mysql@dbgate-plugin-mysql
      - SERVER_mysqlAuth=mysql-auth
      - PORT_mysqlAuth=3306
      - USER_mysqlAuth=user
      - PASSWORD_mysqlAuth=pwd
      - DATABASE_mysqlAuth=auth-db

      # MySQL (files)
      - LABEL_mysqlFiles=MySQL files-db
      - ENGINE_mysqlFiles=mysql@dbgate-plugin-mysql
      - SERVER_mysqlFiles=mysql-files
      - PORT_mysqlFiles=3306
      - USER_mysqlFiles=user
      - PASSWORD_mysqlFiles=pwd
      - DATABASE_mysqlFiles=files-db

      # Postgres (vet)
      - LABEL_postgresVet=Postgres images
      - ENGINE_postgresVet=postgres@dbgate-plugin-postgres
      - SERVER_postgresVet=postgres
      - PORT_postgresVet=5432
      - USER_postgresVet=user
      - PASSWORD_postgresVet=pwd
      - DATABASE_postgresVet=images

      # MongoDBs
      - LABEL_mongoVet=Mongo (vet)
      - ENGINE_mongoVet=mongo@dbgate-plugin-mongo
      - URL_mongoVet=mongodb://root:password@mongo-vet:27017/?authSource=admin

      - LABEL_mongoBilling=Mongo (billing)
      - ENGINE_mongoBilling=mongo@dbgate-plugin-mongo
      - URL_mongoBilling=mongodb://root:password@mongo-billing:27017/?authSource=admin

      - LABEL_mongoVisits=Mongo (visits)
      - ENGINE_mongoVisits=mongo@dbgate-plugin-mongo
      - URL_mongoVisits=mongodb://root:password@mongo-visits:27017/?authSource=admin

      - LABEL_mongoCustomers=Mongo (customers)
      - ENGINE_mongoCustomers=mongo@dbgate-plugin-mongo
      - URL_mongoCustomers=mongodb://root:password@mongo-customers:27017/?authSource=admin

      - LABEL_mongoInventory=Mongo (inventory)
      - ENGINE_mongoInventory=mongo@dbgate-plugin-mongo
      - URL_mongoInventory=mongodb://root:password@mongo-inventory:27017/?authSource=admin

      - LABEL_mongoProducts=Mongo (products)
      - ENGINE_mongoProducts=mongo@dbgate-plugin-mongo
      - URL_mongoProducts=mongodb://root:password@mongo-products:27017/?authSource=admin

      - LABEL_mongoCarts=Mongo (carts)
      - ENGINE_mongoCarts=mongo@dbgate-plugin-mongo
      - URL_mongoCarts=mongodb://root:password@mongo-carts:27017/?authSource=admin
    depends_on:
      mysql-auth:
        condition: service_healthy
      mysql-files:
        condition: service_healthy
      postgres-vet:
        condition: service_healthy
      mongo-vet:
        condition: service_healthy
      mongo-billing:
        condition: service_healthy
      mongo-visits:
        condition: service_healthy
      mongo-customers:
        condition: service_healthy
      mongo-inventory:
        condition: service_healthy
      mongo-products:
        condition: service_healthy
      mongo-carts:
        condition: service_healthy

  dev-tools:
    container_name: dev-tools
    build:
      context: ./dev-tools
      dockerfile: Dockerfile
      args:
        pkg: dev-tools
    restart: unless-stopped
    depends_on:
      mysql-devtools:
          condition: service_healthy
    env_file:
      - stack.env
    ports:
      - "4242:8080"

  mysql-devtools:
    <<: *mysql
    image: mysql:5.7
    platform: linux/amd64
    container_name: mysql-devtools
    env_file:
      - stack.env
    volumes:
      - mysql-devtools-data:/var/lib/mysql

# =========================
# VOLUMES
# =========================
volumes:
  mysql-auth-data:
  mongo-vet-data:
  mongo-vet-config:
  mongo-billing-data:
  mongo-billing-config:
  mongo-visits-data:
  mongo-visits-config:
  mongo-customers-data:
  mongo-customers-config:
  mongo-inventory-data:
  mongo-inventory-config:
  mongo-products-data:
  mongo-products-config:
  mongo-carts-data:
  mongo-carts-config:
  postgres-vet-data:
  mysql-files-data:
  dbgate-data:
  mysql-devtools-data:
