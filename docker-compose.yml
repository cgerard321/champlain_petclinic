services:
  petclinicFrontend:
    image: petclinic-frontend
    container_name: petclinic-frontend
    build:
      context: ./petclinic-frontend
      dockerfile: Dockerfile
      args:
        - BUILD_MODE=development
    ports:
      - "3000:3000"
    volumes:
      - .petclinic-frontend/src:/app/src

  janus:
    image: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/njs:/etc/nginx/njs

  visits-service-new:
    build: visits-service-new
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - mongo-visits
      - mailer-service

  inventory-service:
    build: inventory-service
    hostname: inventory
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - mongo-inventory

  vet-service:
    build: vet-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - mongo-vet
      - postgres-vet

  customers-service-reactive:
    build: customers-service-reactive
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - mongo-customers

  api-gateway:
    build: api-gateway
    #mem_limit: 350m
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - customers-service-reactive
      - vet-service
      - visits-service-new
      - products-service
      - cart-service

  auth-service:
    build: auth-service
    hostname: auth
    depends_on:
      mysql-auth:
        condition: service_healthy
      mailer-service:
        condition: service_started
    environment:
      - SPRING_PROFILES_ACTIVE=docker

  billing-service:
    build: billing-service
    hostname: billing
    #mem_limit: 350m
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - mongo-billing

  mailer-service:
    build: mailer-service
    environment:
      - SMTP_USER=champlain.petclinic@gmail.com
      - SMTP_SERVER=smtp.gmail.com
    env_file:
      - mailer.env

  products-service:
    build: products-service
    hostname: products-service
    depends_on:
      - mongo-products
    environment:
      - SPRING_PROFILES_ACTIVE=docker

  cart-service:
    build: cart-service
    hostname: cart
    depends_on:
      - mongo-carts
    environment:
      - SPRING_PROFILES_ACTIVE=docker

  files-service:
    build: files-service
    environment:
      - FILE_ENDPOINT=minio:9100
      - FILE_ENV=dev
    env_file:
      - mailer.env
    depends_on:
      mysql-files:
        condition: service_healthy
      minio:
        condition: service_healthy

  minio:
    image: minio/minio:RELEASE.2025-04-22T22-12-26Z
    command: server --address ":9100" --console-address ":9101" /data
    environment:
      MINIO_ROOT_USER: user
      MINIO_ROOT_PASSWORD: password
    ports:
      - "9101:9101"
    expose:
      - "9100:9100"
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9100/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 10

  mysql-files:
    image: mysql:5.7
    platform: linux/amd64
    ports:
      - "3311:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=rootpwd
      - MYSQL_DATABASE=files-db
      - MYSQL_USER=user
      - MYSQL_PASSWORD=pwd
    volumes:
      - ./data/mysql-files:/var/lib/mysql-files
      - ./data/init.d:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-uuser", "-ppwd", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 10

  mysql-auth:
    image: mysql:5.7
    platform: linux/amd64 # for M1 Macs
    ports:
      - "3310:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=rootpwd
      - MYSQL_DATABASE=auth-db
      - MYSQL_USER=user
      - MYSQL_PASSWORD=pwd
    volumes:
      - ./data/mysql-auth:/var/lib/mysql-auth
      - ./data/init.d:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-uuser", "-ppwd", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 10

  phpmyadmin:
    image: phpmyadmin:5.2.0
    container_name: PhpMyAdmin
    links:
      - mysql-auth
      - mysql-files
    restart: always
    ports:
      - 5013:80
    environment:
      - PMA_ARBITRARY=1

  mongo-vet:
    image: mongo
    container_name: mongo-vet
    restart: always
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
    #      healthcheck:
    #        test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/test --quiet
    #        retries: 5
    #        interval: 15s
    #        start_period: 30s

  mongo-express-vet:
    image: mongo-express
    restart: always
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=root
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_SERVER=mongo-vet
      - ME_CONFIG_MONGODB_ENABLE_ADMIN=true
    ports:
      - 9000:8081
    depends_on:
      - mongo-vet
      - vet-service

  #Vet Images Postgres container
  postgres-vet:
    image: postgres
    container_name: postgres-vet
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=pwd
      - POSTGRES_DB=images
    ports:
      - 5432:5432

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    restart: always
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@vets.com
      - PGADMIN_DEFAULT_PASSWORD=admin
    ports:
      - 9003:80
    depends_on:
      - postgres-vet

  # billing mongo container
  mongo-billing:
    image: mongo
    container_name: mongo-billing
    restart: always
    ports:
      - 27018:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
    #      healthcheck:
    #        test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/test --quiet
    #        retries: 5
    #        interval: 15s
    #        start_period: 30s

  mongo-express-billing:
    image: mongo-express
    restart: always
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=root
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_SERVER=mongo-billing
      - ME_CONFIG_MONGODB_ENABLE_ADMIN=true
    ports:
      - 8081:8081
    depends_on:
      - mongo-billing
      - billing-service

  mongo-visits:
    image: mongo
    container_name: mongo-visits
    restart: always
    ports:
      - 27015:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/test --quiet
      retries: 5
      interval: 15s
      start_period: 30s

  mongo-express-visits:
    image: mongo-express
    restart: always
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=root
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_SERVER=mongo-visits
      - ME_CONFIG_MONGODB_ENABLE_ADMIN=true
    ports:
      - 9001:8081
    depends_on:
      - mongo-visits
      - visits-service-new

  mongo-customers:
    image: mongo
    container_name: mongo-customers
    restart: always
    ports:
      - 27019:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password

  mongo-express-customers:
    image: mongo-express
    restart: always
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=root
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_SERVER=mongo-customers
      - ME_CONFIG_MONGODB_ENABLE_ADMIN=true
    ports:
      - 8085:8081
    depends_on:
      - mongo-customers
      - customers-service-reactive

    # billing mongo container
  mongo-inventory:
    image: mongo
    container_name: mongo-inventory
    restart: always
    ports:
      - 27020:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password

  mongo-express-inventory:
    image: mongo-express
    restart: always
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=root
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_SERVER=mongo-inventory
      - ME_CONFIG_MONGODB_ENABLE_ADMIN=true
    ports:
      - 8083:8083
    depends_on:
      - mongo-inventory
      - inventory-service

  mongo-products:
    image: mongo
    container_name: mongo-products
    restart: always
    ports:
      - 27021:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password

  mongo-express-products:
    image: mongo-express
    restart: always
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=root
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_SERVER=mongo-products
      - ME_CONFIG_MONGODB_ENABLE_ADMIN=true
    ports:
      - 8086:8081
    depends_on:
      - mongo-products
      - products-service

  mongo-carts:
    image: mongo
    container_name: mongo-carts
    restart: always
    ports:
      - 27022:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password

  mongo-express-carts:
    image: mongo-express
    restart: always
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=root
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_SERVER=mongo-products
      - ME_CONFIG_MONGODB_ENABLE_ADMIN=true
    ports:
      - 8087:8081
    depends_on:
      - mongo-carts
      - cart-service

  # MONITORING SERVICES
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3001:3000"
    volumes:
      - ./monitoring/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./monitoring/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
    depends_on:
      - prometheus
    environment:
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_UID=4701
