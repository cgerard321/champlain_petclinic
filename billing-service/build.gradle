plugins {
	id 'org.springframework.boot' version '2.7.3'
	id 'io.spring.dependency-management' version '1.0.13.RELEASE'
	id 'java'
//	id "io.freefair.lombok" version "6.0.0-m2"
	id 'jacoco'
}

group = 'com.petclinic.billing'
version = '1.0.0-SNAPSHOT'
sourceCompatibility = '1.8'


ext{
	mapstructVersion = "1.3.1.Final"
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'com.itextpdf:itextpdf:5.5.13.2'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'

	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'
	testImplementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo'

	implementation 'org.springframework.boot:spring-boot-starter-validation'
	compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.20'
	implementation 'org.projectlombok:lombok:1.18.20'
	annotationProcessor 'org.projectlombok:lombok'
	implementation("org.mapstruct:mapstruct:${mapstructVersion}")

	compileOnly "org.mapstruct:mapstruct-processor:${mapstructVersion}"
	annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
	testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'com.squareup.okhttp3:okhttp:4.11.0'
	testImplementation 'com.squareup.okhttp3:mockwebserver:4.11.0'

}

jacoco {
	toolVersion = "0.8.8"
}

jacocoTestReport {
	dependsOn test

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					"com/petclinic/**/BillingServiceApplication.class",
					"com/petclinic/**/BillControllerExceptionHandler.class",
					"com/petclinic/**/HttpErrorInfo.class"
			])
		}))
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.50
			}
		}
	}
}

test.finalizedBy jacocoTestReport
check.dependsOn jacocoTestCoverageVerification

test {
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
	}
}

