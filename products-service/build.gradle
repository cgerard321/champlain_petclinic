plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.3'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'io.freefair.lombok' version '6.6.1'
	id 'jacoco'
}

group = 'com.petclinic.products'
version = '1.0.0-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

ext {
	mapstructVersion = "1.5.3.Final"
	lombokVersion = "1.18.26"
	lombokMapstructBindingVersion = "0.2.0"
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'
	implementation "org.mapstruct:mapstruct:${mapstructVersion}"
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	compileOnly "org.mapstruct:mapstruct-processor:${mapstructVersion}"
	annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}", "org.projectlombok:lombok:${lombokVersion}", "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBindingVersion}"
	testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo.spring30x:4.9.2'
	testImplementation("org.mock-server:mockserver-netty:5.13.0")
	testImplementation("org.mock-server:mockserver-client-java:5.13.0")
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

jacoco {
	toolVersion = '0.8.11'
}

jacocoTestReport {
	dependsOn test
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					"com/petclinic/products/utils/DataLoaderService.class",
					"com/petclinic/products/ProductsServiceApplication.class"
			])
		}))
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.7
			}
		}
	}
}

test.finalizedBy jacocoTestReport
check.dependsOn jacocoTestCoverageVerification

tasks.named('test') {
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
	}
}
