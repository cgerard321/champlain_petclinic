@startuml
!includeurl https://raw.githubusercontent.com/RicardoNiepel/C4-PlantUML/master/C4_Container.puml
scale 0.4
!$ICONURL = "https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/v3.0.0/icons"
!include $ICONURL/common.puml
!include $ICONURL/devicons2/spring_original.puml
!include $ICONURL/devicons2/dotnetcore.puml
!include $ICONURL/devicons/go.puml
!include $ICONURL/devicons/mongodb.puml
!include $ICONURL/devicons/mysql.puml
!include $ICONURL/devicons/postgresql.puml
!include $ICONURL/devicons/react.puml
!include $ICONURL/devicons/angular.puml
!include $ICONURL/devicons/html5.puml
!include $ICONURL/font-awesome-5/database.puml
!include $ICONURL/font-awesome-5/user.puml

AddElementTag("microService-java", $shape=EightSidedShape(), $bgColor="#6DB33F", $fontColor="black", $legendText="API Java \neight sided")
AddElementTag("microService-go", $shape=EightSidedShape(), $bgColor="#29BEB0", $fontColor="white", $legendText="API Go \neight sided")
AddElementTag("microService-c#", $shape=EightSidedShape(), $bgColor="#512bd4", $fontColor="white", $legendText="API C# \neight sided")

AddElementTag("storage-mysql", $shape=RoundedBoxShape(), $bgColor="#00758f",$borderColor="Black", $fontColor="white", $legendText="MySQL Database")
AddElementTag("storage-mongo", $shape=RoundedBoxShape(), $bgColor="#00684A",$borderColor="Black", $fontColor="white", $legendText="Mongo Database")
AddElementTag("storage-postgres", $shape=RoundedBoxShape(), $bgColor="#336791",$borderColor="Black", $fontColor="white", $legendText="PostGres Database")

AddElementTag("framework-react", $shape=RoundedBoxShape(), $bgColor="#61DBFB", $fontColor="white", $legendText="React Single-Page Application")
AddElementTag("framework-angular", $shape=RoundedBoxShape(), $bgColor="#b52e31", $fontColor="white", $legendText="Angular Single-Page Application")

AddElementTag("webApp", $bgColor="#e34f26", $fontColor="white", $legendText="Web Application")

AddRelTag("red-line", $lineColor="red", $legendText="billing-service\ndependency")
AddRelTag("blue-line", $lineColor="blue", $legendText="auth-service\ndependency")
AddRelTag("green-line", $lineColor="green", $legendText="cart-service\ndependency")
AddRelTag("orange-line", $lineColor="orange", $legendText="visits-service\ndependency")
AddRelTag("purple-line", $lineColor="purple", $legendText="api_gateway\ndependency")

LAYOUT_TOP_DOWN()
'LAYOUT_WITH_LEGEND()
SHOW_PERSON_OUTLINE()
'HIDE_STEREOTYPE()


title Container Diagram for Champlain Pet Clinic System

Person(receptionist, "Receptionist", "An employee of the Champlain Pet Clinic who assists clients of the clinic.")
Person(inventoryManager, "Inventory Manager", "An employee of the  Champlain Pet Clinic who manages the medical inventory.")
Person(veterinarian, "Veterinarian", "An medical employee of the Champlain Pet Clinic who treats client pets.")
Person(admin, "Admin", "An employee of the Champlain Pet Clinic responsible for account creation and handling overall system issues.")
Person(customer, "Customer", "A customer of the Champlain Pet Clinic.")

Container_Ext(minio, "Bucket Storage", "Minio", "Stores uploaded files externally")
Container_Ext(dbgate, "DBGate", "Web admin", "Unified DB admin over MySQL/Postgres/Mongo instances.")

System_Boundary(c1, "Champlain Pet Clinic System"){

together {
    together {
        Container(react_spa, "React Single-Page Application", "TypeScript, React", "Provides all the Champlain Pet Clinic functionality to clients via their web browser.", $sprite="react", $tags = "framework-react")
        Container(client_app, "Client Web Application", "HTML, CSS", "Delivers the static Client-focused content and the react single page application.", $sprite="html5", $tags = "webApp")
    }
    together {
        Container(employee_app, "Employee Web Application", "HTML, CSS", "Delivers the static Employee-focused content and angular single page application.", $sprite="html5", $tags = "webApp")
        Container(angular_spa, "Angular Single-Page Application", "JavaScript, Angular", "Provides all the Champlain Pet Clinic functionality to employees via their web browser.", $sprite="angular", $tags = "framework-angular")
        Container(angular20_spa, "New Angular Single-Page Application", "TypeScript, Angular", "Provides all the Champlain Pet Clinic functionality to employees via their web browser.", $sprite="angular", $tags = "framework-angular")
    }
}

together {
    Container(api_gateway, "API-Gateway", "Java, Spring Boot", "Provides Champlain Pet Clinic functionality and hosts the Employee Web Application.", $sprite="spring_original", $tags = "microService-java")
    Container(files_service, "files-service", "Go", "Makes API calls to store and access files for other services", $sprite="go", $tags = "microService-go")
    Container(auth_service, "auth-service", "Java, Spring Boot", "Provides authentication and authorization functionality.", $sprite="spring_original" , $tags = "microService-java")
    Container(customers_service, "customers-service", "Java, Spring Boot", "Provides customer functionality which includes owners, pets, and types.", $sprite="spring_original", $tags = "microService-java")
    Container(inventory_service, "inventory-service", "Java, Spring Boot", "Provides medical inventory functionality.", $sprite="spring_original", $tags = "microService-java")
    Container(vets_service, "vets-service", "Java, Spring Boot", "Provides veterinarian functionality.", $sprite="spring_original", $tags = "microService-java")
    Container(visits_service, "visits-service", "Java, Spring Boot", "Provides appointment booking functionality. Includes its own mail service", $sprite="spring_original", $tags = "microService-java")
    Container(billing_service, "billing-service", "Java, Spring Boot", "Provides billing functionality.", $sprite="spring_original", $tags = "microService-java")
    Container(products_service, "products-service", "Java, Spring Boot", "Provides product management functionality for the online store.", $sprite="spring_original", $tags = "microService-java")
    Container(cart_service, "cart-service", "Java, Spring Boot", "Provides cart management functionality for the online store.", $sprite="spring_original", $tags = "microService-java")
    Container(mailer_service, "mailer-service", "Go", "Provides email functionality for the auth-service.", $sprite="go", $tags = "microService-go")
}
        ContainerDb(auth_db, "auth-db", "MySQL 5.7.x", "Stores user information.", $sprite="mysql" , $tags = "storage-mysql")
        ContainerDb(files_db, "files-db", "MySQL 5.7.x", "Stores files information.", $sprite="mysql" , $tags = "storage-mysql")
        ContainerDb(customers_db, "customers-db", "Mongo", "Stores owner, pet, and type information.", $sprite="mongodb", $tags = "storage-mongo")
        ContainerDb(inventory_db, "inventory-db", "Mongo", "Stores medical inventory information.", $sprite="mongodb", $tags = "storage-mongo")
        ContainerDb(vets_vets_db, "vets-db", "Mongo", "Stores veterinarian information.", $sprite="mongodb", $tags = "storage-mongo")
        ContainerDb(vets_images_db, "vets-images-db", "Postgres", "Stores veterinarian image information.", $sprite="postgresql", $tags = "storage-postgres")
        ContainerDb(visits_db, "visits-db", "Mongo", "Stores visits information.", $sprite="mongodb", $tags = "storage-mongo")
        ContainerDb(billing_db, "billing-db", "Mongo", "Stores billing information.", $sprite="mongodb", $tags = "storage-mongo")
        ContainerDb(products_db, "products-db", "Mongo", "Stores product information.", $sprite="mongodb", $tags = "storage-mongo")
        ContainerDb(cart_db, "cart-db", "Mongo", "Stores cart information.", $sprite="mongodb", $tags = "storage-mongo")

}

Rel(customer, client_app, "Visits petclinic.benmusicgeek.synology.me/ using", "HTTPS")
Rel(admin, employee_app, "Visits petclinic-backend.benmusicgeek.synology.me/#! using", "HTTPS")
Rel(receptionist, employee_app, "Visits petclinic-backend.benmusicgeek.synology.me/#! using", "HTTPS")
Rel(inventoryManager, employee_app, "Visits petclinic-backend.benmusicgeek.synology.me/#! using", "HTTPS")
Rel(veterinarian, employee_app, "Visits petclinic-backend.benmusicgeek.synology.me/#! using", "HTTPS")
Rel_R(client_app, react_spa, "Delivers to the customer's web browser")
Rel_R(employee_app, angular_spa, "Delivers to an employee's web browser")
Rel_R(employee_app, angular20_spa, "Delivers modern Angular 20 portal to employee's web browser")
Rel(admin, angular_spa, "views admin_panel and employee specific functionality")
Rel(admin, angular20_spa, "views modern admin panel with Champlain College branding")
Rel(receptionist, angular_spa, "assists customers with appointment booking")
Rel(receptionist, angular20_spa, "uses modern Angular 20 interface for customer assistance")
Rel(veterinarian, angular_spa, "manages their availability")
Rel(veterinarian, angular20_spa, "manages availability with modern Angular 20 interface")
Rel(inventoryManager, angular_spa, "manages medical inventory")
Rel(inventoryManager, angular20_spa, "manages inventory with modern Angular 20 interface")
Rel(customer, react_spa, "views online store, veterinarian and appointment booking functionality")
Rel(react_spa, api_gateway, "Makes API calls to", "JSON/REST/HTTPS")
Rel(angular_spa, api_gateway, "Makes API calls to", "JSON/REST/HTTPS")
Rel(angular20_spa, api_gateway, "Makes API calls to", "JSON/REST/HTTPS")


Rel(customers_service, files_service, "Makes API calls to", "JSON/REST/HTTPS")
Rel(visits_service, files_service, "Makes API calls to", "JSON/REST/HTTPS")

Rel(files_service, files_db, "Reads from and writes to", "JDCB/SQL/TCP", $tags="blue-line")
Rel(files_service, minio, "Makes API calls to", "JSON/REST/HTTPS")
Rel(api_gateway, customers_service, "Makes API calls to", "JSON/REST/HTTPS", $tags="purple-line")
Rel(customers_service, customers_db, "Reads from and writes to", "Mongo/MQL/TCP")
Rel(api_gateway, inventory_service, "Makes API calls to", "JSON/REST/HTTPS", $tags="purple-line")
Rel(inventory_service, inventory_db, "Reads from and writes to", "Mongo/MQL/TCP")
Rel(api_gateway, vets_service, "Makes API calls to", "JSON/REST/HTTPS", $tags="purple-line")
Rel(vets_service, vets_vets_db, "Reads from and writes to", "Mongo/MQL/TCP")
Rel(vets_service, vets_images_db, "Reads from and writes to", "JDCB/SQL/TCP")

Rel(api_gateway, products_service, "Makes API calls to", "JSON/REST/HTTPS", $tags="purple-line")
Rel(products_service, products_db, "Reads from and writes to", "Mongo/MQL/TCP")

Rel(api_gateway, auth_service, "Makes API calls to", "JSON/REST/HTTPS", $tags="purple-line")
Rel(auth_service, mailer_service, "Makes API calls to", "JSON/REST/HTTPS", $tags="blue-line")
Rel(auth_service, cart_service, "Makes API calls to", "JSON/REST/HTTPS", $tags="blue-line")
Rel(auth_service, auth_db, "Reads from and writes to", "JDCB/SQL/TCP", $tags="blue-line")
Rel(api_gateway, billing_service, "Makes API calls to", "JSON/REST/HTTPS", $tags="purple-line")
Rel(billing_service, customers_service, "Makes API calls to", "JSON/REST/HTTPS", $tags="red-line")
Rel(billing_service, vets_service, "Makes API calls to", "JSON/REST/HTTPS", $tags="red-line")
Rel(billing_service, billing_db, "Reads from and writes to", "Mongo/MQL/TCP", $tags="red-line")
Rel(api_gateway, cart_service, "Makes API calls to", "JSON/REST/HTTPS", $tags="purple-line")
Rel(cart_service, products_service, "Makes API calls to", "JSON/REST/HTTPS", $tags="green-line")
Rel(cart_service, cart_db, "Reads from and writes to", "Mongo/MQL/TCP", $tags="green-line")
Rel(api_gateway, visits_service, "Makes API calls to", "JSON/REST/HTTPS", $tags="purple-line")
Rel(visits_service, visits_db, "Reads from and writes to", "Mongo/MQL/TCP", $tags="orange-line")
Rel(visits_service, auth_service, "Makes API calls to", "JSON/REST/HTTPS", $tags="orange-line")
Rel(visits_service, customers_service, "Makes API calls to", "JSON/REST/HTTPS", $tags="orange-line")
Rel(visits_service, vets_service, "Makes API calls to", "JSON/REST/HTTPS", $tags="orange-line")
Rel(visits_service, billing_service, "Makes API calls to", "JSON/REST/HTTPS", $tags="orange-line")

Rel(dbgate, auth_db, "MySQL Driver", "Admin access")
Rel(dbgate, files_db, "MySQL Driver", "Admin access")
Rel(dbgate, vets_images_db, "Postgres Driver", "Admin access")
Rel(dbgate, vets_vets_db, "Mongo Driver", "Admin access")
Rel(dbgate, billing_db, "Mongo Driver", "Admin access")
Rel(dbgate, visits_db, "Mongo Driver", "Admin access")
Rel(dbgate, customers_db, "Mongo Driver", "Admin access")
Rel(dbgate, inventory_db, "Mongo Driver", "Admin access")
Rel(dbgate, products_db, "Mongo Driver", "Admin access")
Rel(dbgate, cart_db, "Mongo Driver", "Admin access")

SHOW_LEGEND()

@enduml